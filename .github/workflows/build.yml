---
name: Build NIFs

env:
  NIF_DIRECTORY: "native/wireguard_nif"

on:
  push:
    branches:
      - main
    tags:
      - "*"

defaults:
  run:
    working-directory: "./native/wireguard_nif"

jobs:
  build_release:
    name: NIF ${{ matrix.job.nif }} - ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          # Linux
          - {
              target: aarch64-unknown-linux-gnu,
              os: ubuntu-18.04,
              nif: "2.16",
              use-cross: true
            }
          - {
              target: aarch64-unknown-linux-gnu,
              os: ubuntu-18.04,
              nif: "2.15",
              use-cross: true
            }
          - {
              target: aarch64-unknown-linux-gnu,
              os: ubuntu-18.04,
              nif: "2.14",
              use-cross: true
            }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-18.04, nif: "2.16" }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-18.04, nif: "2.15" }
          - { target: x86_64-unknown-linux-gnu, os: ubuntu-18.04, nif: "2.14" }

          # macOS
          - { target: aarch64-apple-darwin, os: macos-11, nif: "2.16" }
          - { target: aarch64-apple-darwin, os: macos-11, nif: "2.15" }
          - { target: aarch64-apple-darwin, os: macos-11, nif: "2.14" }
          - { target: x86_64-apple-darwin, os: macos-11, nif: "2.16" }
          - { target: x86_64-apple-darwin, os: macos-11, nif: "2.15" }
          - { target: x86_64-apple-darwin, os: macos-11, nif: "2.14" }

    env:
      RUSTLER_NIF_VERSION: ${{ matrix.job.nif }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install arm64 gcc
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            aarch64-unknown-linux-gnu)
              sudo apt-get -y update
              sudo apt-get -y install gcc-aarch64-linux-gnu ;;
          esac

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: ${{ matrix.job.target }}
          override: true
          profile: minimal

      - name: Install cross
        uses: giantswarm/install-binary-action@v1.0.0
        if: ${{ matrix.job.use-cross }}
        with:
          binary: "cross"
          version: "v0.2.1"
          download_url: "https://github.com/cross-rs/cross/releases/download/${version}/cross-${version}-x86_64-unknown-linux-gnu.tar.gz"
          tarball_binary_path: "${binary}"
          smoke_test: "${binary} --version"

      - name: Extract project info
        shell: bash
        run: |
          echo "PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(sed -n 's/^  @version "\(.*\)"/\1/p' ../../mix.exs | head -n1)" >> $GITHUB_ENV

      - name: Build
        shell: bash
        run: |
          if [ "${{ matrix.job.use-cross }}" == "true" ]; then
            cross build --release --target=${{ matrix.job.target }}
          else
            cargo build --release --target=${{ matrix.job.target }}
          fi

      - name: Rename lib
        id: rename
        shell: bash
        run: |
          LIB_PREFIX="lib"
          case ${{ matrix.job.target }} in
            *-pc-windows-*) LIB_PREFIX="" ;;
          esac;

          LIB_SUFFIX=".so"
          case ${{ matrix.job.target }} in
            *-apple-darwin) LIB_SUFFIX=".dylib" ;;
            *-pc-windows-*) LIB_SUFFIX=".dll" ;;
          esac;

          CICD_INTERMEDIATES_DIR=$(mktemp -d)

          LIB_DIR="${CICD_INTERMEDIATES_DIR}/released"
          mkdir -p "${LIB_DIR}"
          LIB_NAME="${LIB_PREFIX}${{ env.PROJECT_NAME }}${LIB_SUFFIX}"
          LIB_PATH="${LIB_DIR}/${LIB_NAME}"

          cp "target/${{ matrix.job.target }}/release/${LIB_NAME}" "${LIB_DIR}"

          # Use ".so" for macOS
          # See: https://www.erlang.org/doc/man/erlang.html#load_nif-2
          LIB_FINAL_SUFFIX="${LIB_SUFFIX}"
          case ${{ matrix.job.target }} in
            *-apple-darwin) LIB_FINAL_SUFFIX=".so" ;;
          esac;

          LIB_FINAL_NAME="${LIB_PREFIX}${PROJECT_NAME}-v${PROJECT_VERSION}-nif-${RUSTLER_NIF_VERSION}-${{ matrix.job.target }}${LIB_FINAL_SUFFIX}"

          # Copy lib to final name
          cp "${LIB_PATH}" "${LIB_FINAL_NAME}"
          tar -cvzf "${LIB_FINAL_NAME}.tar.gz" "${LIB_FINAL_NAME}"

          LIB_FINAL_PATH="${NIF_DIRECTORY}/${LIB_FINAL_NAME}.tar.gz"

          echo ::set-output name=LIB_FINAL_PATH::${LIB_FINAL_PATH}
          echo ::set-output name=LIB_FINAL_NAME::${LIB_FINAL_NAME}.tar.gz

      - name: Upload release
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.rename.outputs.LIB_FINAL_NAME }}
          path: ${{ steps.rename.outputs.LIB_FINAL_PATH }}

      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ steps.rename.outputs.LIB_FINAL_PATH }}
        if: startsWith(github.ref, 'refs/tags/')
